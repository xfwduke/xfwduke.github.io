#+TITLE: 为什么不 CORE
#+AUTHOR: xfwduke

* 现象
** 不正常的
#+BEGIN_SRC c++
#include <vector>

using namespace std;

int main() {
    vector<int> ivec;
    size_t a = 0;
    a - 1 >= 0 && ivec[a - 1];
    return 0;
}
#+END_SRC

因为失误写出了这样的代码，等反应过来才发现有 /Bug/ 

由于 ~size_t~ 实际是 ~unsigned int~ 类型所以 ~a - 1 >= 0~ 恒为真，所以用 ~a - 1~ 作为下标访问 ~ivec~ 是非法的。

但神奇的是这程序不会 /CORE/ 。

** 正常的
把代码稍微修改下
#+BEGIN_SRC c++
#include <vector>

using namespace std;

int main() {
    vector<int> ivec;
    size_t a = 0;
    auto b = (a - 1 >= 0 && ivec[a - 1]);
    return 0;
}
#+END_SRC

这样就能正常的 /CORE/ 了。

* 分析
遇事不决上汇编，所以来反汇编下上面 /2/ 段代码

1. 不正常的
   #+BEGIN_SRC asm
   Dump of assembler code for function main():
   0x0000555555554760 <+0>:	push   %rbp
   0x0000555555554761 <+1>:	mov    %rsp,%rbp
   0x0000555555554764 <+4>:	push   %rbx
   0x0000555555554765 <+5>:	sub    $0x28,%rsp
   0x0000555555554769 <+9>:	lea    -0x30(%rbp),%rax
   0x000055555555476d <+13>:	mov    %rax,%rdi
   0x0000555555554770 <+16>:	callq  0x5555555547ae <std::vector<int, std::allocator<int> >::vector()>
   0x0000555555554775 <+21>:	movq   $0x0,-0x18(%rbp)
   0x000055555555477d <+29>:	mov    -0x18(%rbp),%rax
   0x0000555555554781 <+33>:	lea    -0x1(%rax),%rdx
   0x0000555555554785 <+37>:	lea    -0x30(%rbp),%rax
   0x0000555555554789 <+41>:	mov    %rdx,%rsi
   0x000055555555478c <+44>:	mov    %rax,%rdi
   0x000055555555478f <+47>:	callq  0x55555555480e <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
   0x0000555555554794 <+52>:	mov    $0x0,%ebx
   0x0000555555554799 <+57>:	lea    -0x30(%rbp),%rax
   0x000055555555479d <+61>:	mov    %rax,%rdi
   0x00005555555547a0 <+64>:	callq  0x5555555547ca <std::vector<int, std::allocator<int> >::~vector()>
   0x00005555555547a5 <+69>:	mov    %ebx,%eax
   0x00005555555547a7 <+71>:	add    $0x28,%rsp
   0x00005555555547ab <+75>:	pop    %rbx
   0x00005555555547ac <+76>:	pop    %rbp
   0x00005555555547ad <+77>:	retq   
End of assembler dump.
   #+END_SRC
2. 正常的
  #+BEGIN_SRC asm
  Dump of assembler code for function main():
   0x0000555555554760 <+0>:	push   %rbp
   0x0000555555554761 <+1>:	mov    %rsp,%rbp
   0x0000555555554764 <+4>:	push   %rbx
   0x0000555555554765 <+5>:	sub    $0x38,%rsp
   0x0000555555554769 <+9>:	lea    -0x40(%rbp),%rax
   0x000055555555476d <+13>:	mov    %rax,%rdi
   0x0000555555554770 <+16>:	callq  0x5555555547b8 <std::vector<int, std::allocator<int> >::vector()>
   0x0000555555554775 <+21>:	movq   $0x0,-0x18(%rbp)
   0x000055555555477d <+29>:	mov    -0x18(%rbp),%rax
   0x0000555555554781 <+33>:	lea    -0x1(%rax),%rdx
   0x0000555555554785 <+37>:	lea    -0x40(%rbp),%rax
   0x0000555555554789 <+41>:	mov    %rdx,%rsi
   0x000055555555478c <+44>:	mov    %rax,%rdi
   0x000055555555478f <+47>:	callq  0x555555554818 <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
   0x0000555555554794 <+52>:	mov    (%rax),%eax
   0x0000555555554796 <+54>:	test   %eax,%eax
   0x0000555555554798 <+56>:	setne  %al
   0x000055555555479b <+59>:	mov    %al,-0x19(%rbp)
   0x000055555555479e <+62>:	mov    $0x0,%ebx
   0x00005555555547a3 <+67>:	lea    -0x40(%rbp),%rax
   0x00005555555547a7 <+71>:	mov    %rax,%rdi
   0x00005555555547aa <+74>:	callq  0x5555555547d4 <std::vector<int, std::allocator<int> >::~vector()>
   0x00005555555547af <+79>:	mov    %ebx,%eax
   0x00005555555547b1 <+81>:	add    $0x38,%rsp
   0x00005555555547b5 <+85>:	pop    %rbx
   0x00005555555547b6 <+86>:	pop    %rbp
   0x00005555555547b7 <+87>:	retq   
End of assembler dump.
  #+END_SRC

把 /2/ 段汇编关键的相同点和不同点抽出来

1. 下标访问部分
  #+BEGIN_SRC asm
   0x0000555555554789 <+41>:	mov    %rdx,%rsi
   0x000055555555478c <+44>:	mov    %rax,%rdi
   0x000055555555478f <+47>:	callq  0x55555555480e <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
  #+END_SRC
  - ~%rsi~ 是 ~a - 1~ 后的非法下标
  - ~%rdi~ 是 ~ivec~ 对象的地址
  - ~%rax~ 作为返回值

  在 ~不正常的~ 的版本中，程序就这样结束了

2. 获取结果
  #+BEGIN_SRC asm
  0x0000555555554794 <+52>:	mov    (%rax),%eax
  #+END_SRC
  ~正常~ 的版本中多了这样一句，从 ~%rax~ 所存的内存地址获取一个 /32/ 位值——获取下标访问结果的值。
  
  这就是引起 /CORE/ 的语句——因为下标非法，返回的值的地址也非法，所以解引用时 /CORE/ 。

* 总结

1. 不保存结果的表达式执行后，不去获取值
2. 对 /C++/ 来说非法的操作，在汇编层面看可能并不会报错——非法的下标访问并不会报错
3. 在汇编层面，由非法下标带来的非法地址解引用才会引起 /CORE/
4. 汇编中看不到 ~a - 1 >= 0~ 对应的代码，因为这部分编译时被优化掉了
5. /2/ 个版本的代码在 /clang++/ 中都会 /CORE/ ，所以这种情况是和编译器强相关的
